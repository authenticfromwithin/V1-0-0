AFW â€” Full Integration SQL (Accounts + Profiles + Progress + Admin)
Date: 2025-08-27

create table if not exists public.events (
  t bigint primary key,
  type text not null,
  user_id uuid,
  data jsonb
);
alter table public.events enable row level security;
create policy if not exists "insert anon events"
on public.events for insert to anon with check (true);

create table if not exists public.profiles_public (
  user_id uuid primary key references auth.users(id) on delete cascade,
  display_name text,
  theme text,
  avatar_archetype text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
alter table public.profiles_public enable row level security;
create policy if not exists "owner upsert profile" on public.profiles_public
for insert to authenticated with check (auth.uid() = user_id);
create policy if not exists "owner update profile" on public.profiles_public
for update to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);
create policy if not exists "owner read profile" on public.profiles_public
for select to authenticated using (auth.uid() = user_id);

create table if not exists public.progress_events (
  id bigserial primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  t bigint not null,
  page text not null,
  intent text,
  theme text,
  avatar text,
  meta jsonb
);
alter table public.progress_events enable row level security;
create policy if not exists "owner insert progress" on public.progress_events
for insert to authenticated with check (auth.uid() = user_id);
create policy if not exists "owner read progress" on public.progress_events
for select to authenticated using (auth.uid() = user_id);

create table if not exists public.admins (
  user_id uuid primary key,
  email text unique not null
);
alter table public.admins enable row level security;
create policy if not exists "admins can read events"
on public.events for select to authenticated
using (exists (select 1 from public.admins a where a.user_id = auth.uid()));
create policy if not exists "admins can read progress"
on public.progress_events for select to authenticated
using (exists (select 1 from public.admins a where a.user_id = auth.uid()));
create policy if not exists "admins read profiles"
on public.profiles_public for select to authenticated
using (exists (select 1 from public.admins a where a.user_id = auth.uid()));

-- Seed yourself once you have an account (change the email)
insert into public.admins (user_id, email)
select id, email from auth.users where email = 'you@example.com'
on conflict (user_id) do nothing;
